=========== API ===========

- criar o projeto:
* npm init;

- criar as pastas:
* src/ config controller model routes;

-criar um index.js:
* arquivo principal;

- instalar o express:
* npm install express --save;

- instalar o nodemon:
* npm install nodemon --D;

- instalr o mongoose:
* npm install mongoose --save;

- criar dentro do config (importação do bd):
* database.js;

- na pasta model criar os arquivos models:
* TaskModel.js;

- na pasta controller criar o arquivo:
* TaskController.js;

- criar o seguinte arquivo na pasta routes:
* TaskRoutes.js;

- criar uma pasta middlewares:
* TaskValidation.js;

- modulo date-fns para trabalhar com data e hrs:
* npm install date-fns;

- criar um novo arquivo em middlewares de validação:
* MacAddress.Validation.js;

=========== WEB ===========

- iniciar projeto em React:
* npx create-react-app web;

- excluir os arquivos que vem por padrão e deixar:
* public/index.html - src/.gitignore, package.json e package-lock.json, App.js e index.js;

- criar uma nova pasta em src:
* src/view;

- copiar o contéudo do APP para a página home:

- criar o arquivo .env:

- rodar o projeto:
* npm start;

- instalar styled-component:
* npm install --save styled-components;

- criar uma pasta components:
* criar as pastas de componentes do projeto;

- instalar o axios:
* npm install --save axios;

- criar uma pasta services (conexão com a api):
* api.js;

- usar o CORS para dar permissão para a API (no backend/index.js):
* npm install --save cors;

- instalar o date-fns para a versão web também:
* npm install --save date-fns;

- criar uma pasta utils:
* typeIcons.js (arquivo para a coleção dos icones - vetor);

- instalar o react-router (ele pode ser substituido pelo hooker):
* npm install react-router-dom;

- criar uma pasta em src:
* routes/index.js;

- intalar qrcode.react:
* npm install qrcode.react --save;
